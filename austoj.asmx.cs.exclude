using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Services;

namespace AUSTOJ_Service
{
    /// <summary>
    /// Summary description for austoj
    /// </summary>
    [WebService(Namespace = "http://austoj.azurewebsites.net")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    // [System.Web.Script.Services.ScriptService]


    public class austoj : System.Web.Services.WebService
    {
        string output;
        int timeOut = 3000;
        string extension;
        string code;
        string input;
        string fileName;
        string fullCodeFile;
        string root = "D:\\home\\site\\wwwroot\\CODE\\";
        string Cppcompiler = "D:\\home\\site\\wwwroot\\TDM\\bin\\";
        string javacompiler = "D:\\home\\site\\wwwroot\\JAVA\\bin\\";
        string stderror = "";
        public status stat = new status();
        generateFile gf = new generateFile();
        private bool isCompiled = false;

        [WebMethod]
        public void getData( string code , string extension , string input )
        {
            this.code = code;
            this.extension = extension;
            this.input = input;

            if(this.code.Trim() != null && this.extension.Trim() != null)
            {
                generateFile();
            }
        }

        private string generateFile()
        {
            // Generate a random string for file name
            randomString rs = new randomString();
            
            // GUI control 
            if (extension == ".c" || extension == ".cpp")
            {
                // calling the method to get a file name
                fileName = rs.generateFileName();
                // making a full source code name
                fullCodeFile = fileName + extension;
                // Saving the code file into the disk for further process
                
                gf.generateCodeFile(root + fullCodeFile, code);
            }
            // generating code files to save them in root directory
            // the file is either C or CPP
            else if (extension == ".java")
            {
                // Same goes for JAVA as above
                fileName = "Main";
                fullCodeFile = fileName + extension;
                
                gf.generateCodeFile(root + fullCodeFile, code);
            }
            if (File.Exists(root + fullCodeFile))
            {
                
                // we'll only try to compile if the file is generated successfully
                try
                {
                    
                    compile(fullCodeFile, fileName, extension, input);
                    //gf.generateCodeFile(root + "helloo.cpp", code);
                }
                catch (Exception ex)
                {
                    stat.Compile_status = "COMPILE FAILED!";
                }
            }
            // If file compilation completed then we'll try to execute it
            try
                {
                    execute(fileName , extension, input);
                }
                catch (Exception ex)
                {

                }
            

            return show();
        }

        private void compile(string fullCodeFile, string fileName, string extension, string input = "")
        {

            // start a new process
            Process process = new Process();
            process.StartInfo.UseShellExecute = false;
            // redirecting the STDERROR stream from process
            process.StartInfo.RedirectStandardError = true;

            // setting up process and it's arguments according to file extension 
            if (extension == ".c")
            {
                
                process.StartInfo.FileName = Cppcompiler + "gcc.exe ";
                process.StartInfo.Arguments = " -o " + root + fileName + " " + root + fullCodeFile;
            }
            else if (extension == ".cpp")
            {
                process.StartInfo.FileName = Cppcompiler + "g++.exe ";
                process.StartInfo.Arguments = " -o " + root + fileName + " " + root + fullCodeFile;
            }
            else if (extension == ".java")
            {
                process.StartInfo.FileName = javacompiler + "javac.exe ";
                process.StartInfo.Arguments = root + "Main.java" + " -d " + root;

            }

            //starting the process
            process.Start();
            gf.generateCodeFile(root + "sifat.cpp", code);
            // Reading whether any error occured or not
            stderror = process.StandardError.ReadToEnd();
            // setting up the error
            stat.Compile_Error = stderror;
            // waiting for process to exit
            process.WaitForExit();

            //if (File.Exists(root + fullCodeFile))
            //{
            //    // compiling done. So the code file isn't needed anymore
            //    File.Delete(root + fullCodeFile);
            //}

            // if the exe is generated then try to run it
            if (File.Exists(root + fileName + ".exe"))
            {
                gf.generateCodeFile(root + "sifat.cpp", code);
                stat.Run_status = "COMPILE SUCCESSFUL";
            }
            // IF the class file is generated then try to run
            else if (File.Exists(root + fileName + ".class"))
            {
                stat.Compile_status = "COMPILE SUCCESSFUL";
            }
            else
            {
                stat.Compile_status = "COMPILE FAILED";
            }

        }

        private void execute(string filename, string extension, string input)
        {
            Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardError = true;

            if (extension == ".c")
                p.StartInfo.FileName = root + filename + ".exe";

            else if (extension == ".cpp")
                p.StartInfo.FileName = root + filename + ".exe";

            else if (extension == ".java")
            {
                p.StartInfo.FileName = @"D:\home\site\wwwroot\JAVA\bin\java.exe";
                p.StartInfo.Arguments = "Main";
                p.StartInfo.WorkingDirectory = @"D:\home\site\wwwroot\CODE\";
            }

            p.Start();

            if (input.Trim() != null)
            {
                StreamWriter myStreamWriter = p.StandardInput;
                myStreamWriter.WriteLine(input);

            }

            output = p.StandardOutput.ReadToEnd();

            stat.Run_Error = p.StandardError.ReadToEnd();
            stat.Runtime = ((p.ExitTime - p.StartTime).TotalMilliseconds) / 1000 + " s";

            p.WaitForExit();
          
            stat.Run_status = "RUN SUCCESSFUL";

            //if (File.Exists(root + filename + ".exe"))
            //{
            //    File.Delete(root + filename + ".exe");
            //}
            //else if (File.Exists(root + filename + ".class"))
            //{
            //    File.Delete(root + filename + ".class");
            //}

        }

        public string show()
        {

            stat.STDOUT = output;
            stat.FileNameExt = fullCodeFile;
            stat.Code = code;
            stat.STDIN = input;

            return stat.STDOUT;
        }
    }
}
